<?xml version="1.0"?>
<robot name="new_fyp_kal_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- Define robot constants -->
  <xacro:property name="base_width" value="0.14"/>
  <xacro:property name="base_length" value="0.19"/>
  <xacro:property name="base_height" value="0.035"/>
  <xacro:property name="top_layer_height" value="0.005"/>
  <xacro:property name="standoff_radius" value="0.0025"/>
  <xacro:property name="standoff_height" value="0.06"/>
  <xacro:property name="wheel_radius" value="0.06"/>
  <xacro:property name="wheel_width" value="0.06"/>
  <xacro:property name="wheel_ygap" value="0.03"/>
  <xacro:property name="wheel_zoff" value="0.0"/>
  <xacro:property name="wheel_xoff" value="0.0"/>
  
  <!-- Define intertial property macros  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
    </inertial>
  </xacro:macro>
  
  

  <!-- Robot Base -->
  <link name="base_link">
    <visual>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
      <material name="White">
        <color rgba="1.0 1.0 1.0 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>
    <xacro:box_inertia m="5" w="${base_width}" d="${base_length}" h="${base_height}"/>
  </link>
  
  <!-- Top Layer -->
  <link name="top_layer">
    <visual>
      <geometry>
        <box size="${base_length} ${base_width} ${top_layer_height}"/>
      </geometry>
      <material name="Red">
        <color rgba="1.0 0.0 0.0 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="${base_length} ${base_width} ${top_layer_height}"/>
      </geometry>
    </collision>
  <xacro:box_inertia m="1" w="${base_width}" d="${base_length}" h="${base_height}"/>
  </link>
  
  <!-- Standoffs -->
  <xacro:macro name="standoff" params="prefix x y">
    <link name="${prefix}_standoff">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <cylinder radius="${standoff_radius}" length="${standoff_height}"/>
        </geometry>
        <material name="Gold">
          <color rgba="1 0.843 0 1.0"/>
        </material>
      </visual>
      <collision>
        <geometry>
          <cylinder radius="${standoff_radius}" length="${standoff_height}"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertia m="0.005" r="${standoff_radius}" h="${standoff_height}"/>
    </link>
    <joint name="${prefix}_standoff_joint" type="fixed">
      <parent link="base_link"/>
      <child link="${prefix}_standoff"/>
      <origin xyz="${x} ${y} ${(base_height/2 + standoff_height/2)}" rpy="0 0 0"/>
    </joint>
  </xacro:macro>
  
  <xacro:standoff prefix="front_left" x="${base_length/2}" y="${base_width/2}"/>
  <xacro:standoff prefix="front_right" x="${base_length/2}" y="${-base_width/2}"/>
  <xacro:standoff prefix="rear_left" x="${-base_length/2}" y="${base_width/2}"/>
  <xacro:standoff prefix="rear_right" x="${-base_length/2}" y="${-base_width/2}"/>
  
  <!-- Top Layer Joint -->
  <joint name="top_layer_joint" type="fixed">
    <parent link="base_link"/>
    <child link="top_layer"/>
    <origin xyz="0 0 ${(base_height + standoff_height - 0.02)}" rpy="0 0 0"/>
  </joint>
  
  <!-- Robot Footprint -->
  <link name="base_footprint"/>

  <joint name="base_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_footprint"/>
    <origin xyz="0.0 0.0 ${-wheel_radius}" rpy="0 0 0"/>
  </joint>
  
  <!-- Wheels -->
  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*(wheel_xoff + (base_length/2))} ${y_reflect*(base_width/2+wheel_ygap)} ${wheel_zoff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <xacro:wheel prefix="drivewhl_l" x_reflect="1" y_reflect="1" />
  <xacro:wheel prefix="drivewhl_r" x_reflect="1" y_reflect="-1" />
  <xacro:wheel prefix="rearwhl_l" x_reflect="-1" y_reflect="1" />
  <xacro:wheel prefix="rearwhl_r" x_reflect="-1" y_reflect="-1" />
  
  <link name="imu_link">
  <visual>
    <geometry>
      <box size="0.01 0.005 0.0001"/>
    </geometry>
  </visual>

  <collision>
    <geometry>
      <box size="0.01 0.005 0.0001"/>
    </geometry>
  </collision>

  <xacro:box_inertia m="0.001" w="0.01" d="0.005" h="0.0001"/>
</link>

<joint name="imu_joint" type="fixed">
  <parent link="base_link"/>
  <child link="imu_link"/>
  <origin xyz="0 0 0.0175"/>
</joint>

 <gazebo reference="imu_link">
  <sensor name="imu_sensor" type="imu">
   <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
      <ros>
        <namespace>/demo</namespace>
        <remapping>~/out:=imu</remapping>
      </ros>
      <initial_orientation_as_reference>false</initial_orientation_as_reference>
    </plugin>
    <always_on>true</always_on>
    <update_rate>100</update_rate>
    <visualize>true</visualize>
    <imu>
      <angular_velocity>
        <x>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </noise>
        </x>
        <y>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </noise>
        </y>
        <z>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </noise>
        </z>
      </angular_velocity>
      <linear_acceleration>
        <x>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </noise>
        </x>
        <y>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </noise>
        </y>
        <z>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </noise>
        </z>
      </linear_acceleration>
    </imu>
  </sensor>
</gazebo>

<gazebo>
  <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
    <ros>
      <namespace>/demo</namespace>
    </ros>

    <!-- wheels -->     <!--try to change name-->
    <left_joint>drivewhl_l_joint</left_joint>
    <right_joint>drivewhl_r_joint</right_joint>
    <left2_joint>rearwhl_l_joint</left2_joint>
    <right2_joint>rearwhl_r_joint</right2_joint>

    <!-- kinematics -->
    <wheel_separation>0.2</wheel_separation>
    <wheel_diameter>0.12</wheel_diameter>

    <!-- limits -->
    <max_wheel_torque>20</max_wheel_torque>
    <max_wheel_acceleration>1.0</max_wheel_acceleration>

    <!-- output -->
    <publish_odom>true</publish_odom>
    <publish_odom_tf>true</publish_odom_tf>
    <publish_wheel_tf>true</publish_wheel_tf>

    <odometry_frame>odom</odometry_frame>
    <robot_base_frame>base_link</robot_base_frame>
  </plugin>
</gazebo>


    <gazebo reference="base_link">
        <material>Gazebo/Green</material>
    </gazebo>

    <gazebo reference="top_layer">
        <material>Gazebo/Blue</material>
    </gazebo>
    
      
</robot>

